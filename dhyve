#!/bin/bash
#dhyve_version: v1.0.0

print_help () {
    echo "Usage: dhyve <command> [options]"
    echo ""
    echo "  available commands:"
    echo "    init:    initialize a new vm"
    echo "    up:      start the dhyve vm"
    echo "    down:    stop the dhyve vm"
    echo "    ssh:     login to the vm via ssh"
    echo "    scp:     pass configuration to scp to allow copying files to/from the dhyve vm"
    echo "    status:  print the vm's status"
    echo "    env:     output environment variables to use docker with the dhyve vm"
    echo "             to use, eval \"\$(dhyve env)\""
    echo "    update:  update the dhyve script"
    echo "    upgrade: upgrade your vm to the newest boot2docker image"
    echo ""
    echo "  available options for init command"
    echo "    -m:      amount of memory to allocate to the vm [2G]"
    echo "    -d:      size of disk to create, in gigabytes [10]"
    echo "    -c:      number of cpus to assign [1]"
    return 1
}

get_ip () {
    local trimmed=$(echo $1 | sed 's/0\([0-9a-fA-F]:\)/\1/g')
    awk '
    {
      if ($1 ~ /^name/) {
        name=substr($1, 6)
      }
      if ($1 ~ /^ip_address/) {
        ip_address=substr($1, 12)
      }
      if (name != "" && ip_address != "") {
        ip_addresses[name]=ip_address
        name=ip_address=""
      }
    }
    END {
        print ip_addresses["'$trimmed'"]
    }
    ' /var/db/dhcpd_leases
}

# this function copied from https://github.com/ailispaw/boot2docker-xhyve and modified lightly
get_exports () {
    local vmnet="/Library/Preferences/SystemConfiguration/com.apple.vmnet"
    local addr=$(defaults read ${vmnet} Shared_Net_Address)
    local mask=$(defaults read ${vmnet} Shared_Net_Mask)

    function ip2num() {
      local IFS=.
      local ip=($1)
      printf "%s\n" $(( (${ip[0]} << 24) | (${ip[1]} << 16) | (${ip[2]} << 8) | ${ip[3]} ))
    }

    function num2ip() {
      local n=$1
      printf "%d.%d.%d.%d\n" \
        $(( $n >> 24 )) $(( ($n >> 16) & 0xFF )) $(( ($n >> 8) & 0xFF )) $(( $n & 0xFF ))
    }

    local num=$(( $(ip2num ${addr}) & $(ip2num ${mask}) ))
    local net=$(num2ip ${num})

    echo "/Users -network ${net} -mask ${mask} -alldirs -mapall=$(id -u $SUDO_USER):$(id -g $SUDO_USER)"
}

get_bootsync () {
    local tempfile=$(mktemp -t dhyve)
    echo '#!/bin/sh' > "$tempfile"
    echo 'mkdir -p /Users' >> "$tempfile"
    echo 'umount /Users' >> "$tempfile"
    echo '/usr/local/etc/init.d/nfs-client start' >> "$tempfile"
    echo 'GW_IP=$(ip route get 8.8.8.8 | awk '"'"'NR==1 {print $3}'"'"')' >> "$tempfile"
    echo 'if [ -n "${GW_IP}" ]; then' >> "$tempfile"
    echo '    mount ${GW_IP}:/Users /Users -o rw,async,noatime,rsize=32768,wsize=32768,proto=tcp' >> "$tempfile"
    echo 'fi' >> "$tempfile"

    chmod +x "$tempfile"
    echo "$tempfile"
}

get_latest_version () {
    local args=''
    if [ -n "$HOMEBREW_GITHUB_API_TOKEN" ]; then
        args="-H \"Authorization: token $HOMEBREW_GITHUB_API_TOKEN\""
    fi
    local version=$(curl -s "$args" https://api.github.com/repos/nlf/dhyve/releases/latest | awk -F'"' '/tag_name/ { print $4 }')
    if [ -z "$version" ]; then
        echo "[dhyve] failed to retrieve latest version information"
        exit 1
    fi

    echo $version
}

get_installed_version () {
    local dhyve=$(which dhyve)
    local version=$(cat "$dhyve" | awk -F' ' '/dhyve_version/ { print $2; exit }')
    if [ -z "$version" ]; then
        version="unknown"
    fi

    echo $version
}

check_vm_exists () {
    if [ ! -e "$HOME/.dhyve" ]; then
        echo "[dhyve] no vm has been initialized, try running 'dhyve init'"
        exit 1
    fi
}

check_vm_running () {
    if [ ! -e "$HOME/.dhyve/vm.pid" ]; then
        echo "[dhyve] not running"
        exit 1
    fi

    local pid=$(cat "$HOME/.dhyve/vm.pid")
    ps $pid >/dev/null 2>&1
    if [ $? != 0 ]; then
        rm "$HOME/.dhyve/vm.pid"
        echo "[dhyve] not running"
        exit 1
    fi
}

update_dhyve () {
    if [ ! -w "$(which dhyve)" ]; then
        echo "[dhyve] this command requires root permissions"
        sudo "$0" "update"
        exit
    fi

    local version; version=$(get_latest_version)
    if [ $? != 0 ]; then
        echo "$version"
        exit 1
    fi

    do_update () {
        tempdir=$(mktemp -d -t dhyve)
        curl -Lso "$tempdir/dhyve.tar.gz" "https://github.com/nlf/dhyve/archive/$version.tar.gz"
        tar xf "$tempdir/dhyve.tar.gz" -C "$tempdir" --strip-components 1
        install -CS "$tempdir/dhyve" "$(which dhyve)"
    }

    local tempdir
    if [ "$version" != "$(get_installed_version)" ]; then
        echo -n "[dhyve] upgrading to version $version.."
        do_update
        echo "done"
    else
        echo "[dhyve] latest version ($version) already installed"
    fi

    exit 0
}

download_boot2docker () {
    local version=$1

    curl -Lso "$HOME/.dhyve/vmlinuz64" "https://github.com/nlf/dhyve/releases/download/$version/vmlinuz64"
    curl -Lso "$HOME/.dhyve/initrd.img" "https://github.com/nlf/dhyve/releases/download/$version/initrd.img"
    echo "$version" > "$HOME/.dhyve/vm.version"
}

upgrade_boot2docker () {
    check_vm_exists
    local status; status=$(check_vm_running)
    if [ $? == 0 ]; then
        echo "[dhyve] is currently running, please stop it first"
        return 1
    fi

    local version; version=$(get_latest_version)
    if [ $? != 0 ]; then
        echo "$version"
        return 1
    fi

    if [ -e "$HOME/.dhyve/vm.version" ]; then
        if [ "$(cat $HOME/.dhyve/vm.version)" != "$version" ]; then
            echo -n "[dhyve] upgrading vm to version $version.."
            download_boot2docker "$version"
            echo "done"
        else
            echo "[dhyve] latest vm version ($version) already installed"
        fi
    else
        echo -n "[dhyve] upgrading vm to version $version.."
        download_boot2docker "$version"
        echo "done"
    fi
}

vm_init () {
    if [ "$USER" != "root" ]; then
        echo "[dhyve] this command requires root permissions"
        sudo "$0" "init" "$@"
        exit
    fi

    if [ -d "$HOME/.dhyve" ]; then
        read -p "[dhyve] it looks like you've already created a dhyve machine, would you like to delete it and start over? (y/n) " choice
        case "$choice" in
            y|Y)
                if [ -e "$HOME/.dhyve/vm.pid" ]; then
                    echo "[dhyve] your vm is currently running, please stop it first"
                    return 1
                fi
                rm -rf "$HOME/.dhyve"
                ;;
            n|N)
                return 1
                ;;
        esac
    fi

    mkdir -p $HOME/.dhyve

    echo -n "[dhyve] generating a UUID.."
    local uuid="2996454B-06DE-43B0-9FC6-9E9F38D1DCAE" # $(uuidgen)
    local name="dhyve"
    echo "$name" > "$HOME/.dhyve/vm.name"
    echo "done"

    local mem=2G
    local disk=10
    local cpu=1

    while getopts "m:d:c:" opt; do
        case $opt in
            m)
                mem=$(echo $OPTARG | tr '[:lower:]' '[:upper:]')
                ;;
            d)
                disk=$OPTARG
                ;;
            c)
                cpu=$OPTARG
                ;;
            :)
                echo "[dhyve] -$OPTARG requires an argument."
                exit 1
        esac
    done

    echo -n "[dhyve] saving options.."
    local args="-A -m $mem -c $cpu -s 0:0,hostbridge -l com1,stdio -s 2:0,virtio-net -s 4,virtio-blk,$HOME/.dhyve/disk.img -U $uuid -f kexec,$HOME/.dhyve/vmlinuz64,$HOME/.dhyve/initrd.img"
    local cmdline="loglevel=3 user=docker console=ttyS0 noembed nomodeset norestore waitusb=10:LABEL=boot2docker-data base host=$name"
    echo "$args" > "$HOME/.dhyve/vm.args"
    echo "$cmdline" > "$HOME/.dhyve/vm.cmdline"
    echo "done"

    echo -n "[dhyve] generating a new ssh key.."
    ssh-keygen -t rsa -b 2048 -P "" -f "$HOME/.dhyve/dhyve_key" >/dev/null 2>&1
    echo "done"

    echo -n "[dhyve] creating nfs export.."
    local exports=$(get_exports)
    touch /etc/exports
    grep -q "$exports" /etc/exports
    if [ $? -ne 0 ]; then
        echo "$exports" >> /etc/exports
        nfsd restart >/dev/null 2>&1
    fi
    echo "done"

    echo -n "[dhyve] generating a disk image.."
    local tempdir=$(mktemp -d -t dhyve)
    echo "boot2docker, please format-me" > "$tempdir/boot2docker, please format-me"
    mkdir -p "$tempdir/.ssh"
    cp "$HOME/.dhyve/dhyve_key.pub" "$tempdir/.ssh/authorized_keys"
    tar cf "$HOME/.dhyve/disk.img" --directory="$tempdir" "boot2docker, please format-me" ".ssh/authorized_keys"
    echo -n "."
    dd if=/dev/zero bs=1g count=$disk >> "$HOME/.dhyve/disk.img" 2>/dev/null
    echo "done"

    local version; version=$(get_latest_version)
    if [ $? != 0 ]; then
        echo "$version"
        return 1
    fi

    echo -n "[dhyve] fetching dhyve vm $version.."
    download_boot2docker "$version"
    echo "done"

    chown -R $SUDO_USER "$HOME/.dhyve"
    echo "[dhyve] finished creating vm, to start it run 'dhyve up'"
}

vm_up () {
    check_vm_exists
    local status; status=$(check_vm_running)
    if [ $? == 0 ]; then
        echo "[dhyve] is already running"
        return 1
    fi

    if [ "$USER" != "root" ]; then
        echo "[dhyve] this command requires root permissions"
        sudo "$0" "up"
        exit
    fi

    echo -n "[dhyve] starting.."
    local exports=$(get_exports)
    touch /etc/exports
    grep -q "$exports" /etc/exports
    if [ $? -ne 0 ]; then
        echo "$exports" >> /etc/exports
        nfsd restart >/dev/null 2>&1
    fi
    local args=$(cat "$HOME/.dhyve/vm.args")
    local cmdline=$(cat "$HOME/.dhyve/vm.cmdline")
    nohup xhyve $args,"$cmdline" </dev/null >/dev/null 2>&1 &
    echo $! > "$HOME/.dhyve/vm.pid"
    until scp -r -i "$HOME/.dhyve/dhyve_key" -o ConnectTimeout=4 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no docker@$(get_ip $(cat "$HOME/.dhyve/vm.name")):.docker "$HOME/.dhyve/certs" >/dev/null 2>&1; do
        echo -n "."
        sleep 0.5
    done
    local name=$(cat "$HOME/.dhyve/vm.name")
    local ip=$(get_ip $name)
    sed -i '' "s/.* dhyve.vm$/$ip dhyve.vm/g" /etc/hosts
    grep -q "$ip dhyve.vm" /etc/hosts || echo "$ip dhyve.vm" >> /etc/hosts
    ssh -i "$HOME/.dhyve/dhyve_key" -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no docker@dhyve.vm ls /var/lib/boot2docker/bootsync.sh >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        local bootsync=$(get_bootsync)
        scp -i "$HOME/.dhyve/dhyve_key" -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "$bootsync" docker@dhyve.vm:bootsync.sh >/dev/null 2>&1
        ssh -i "$HOME/.dhyve/dhyve_key" -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no docker@dhyve.vm sudo mv bootsync.sh /var/lib/boot2docker/bootsync.sh >/dev/null 2>&1
        ssh -i "$HOME/.dhyve/dhyve_key" -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no docker@dhyve.vm sudo /var/lib/boot2docker/bootsync.sh >/dev/null 2>&1
    fi
    echo "done"
    chown -R $SUDO_USER "$HOME/.dhyve"
}

vm_down () {
    check_vm_exists
    check_vm_running
    if [ "$USER" != "root" ]; then
        echo "[dhyve] this command requires root permissions"
        sudo "$0" "down"
        exit
    fi

    echo -n "[dhyve] stopping.."
    local pid=$(cat "$HOME/.dhyve/vm.pid")
    kill $pid
    while ps $pid >/dev/null; do
        echo -n "."
        sleep 0.5
    done
    rm "$HOME/.dhyve/vm.pid"
    echo "done"
}

vm_status () {
    check_vm_exists
    local status; status=$(check_vm_running)
    if [ $? == 0 ]; then
        status="running"
    else
        status="stopped"
    fi

    local name=$(cat "$HOME/.dhyve/vm.name")
    echo "[dhyve] status: $status"
    echo "        name:   $name"
    if [ "$status" == "running" ]; then
        echo "        pid:    $(cat "$HOME/.dhyve/vm.pid")"
        echo "        ip:     $(get_ip "$name") [dhyve.vm]"
    fi
    echo "        disk:   $(du -h "$HOME/.dhyve/disk.img")"
    echo "        args:   $(cat "$HOME/.dhyve/vm.args")"
    echo "        kparam: $(cat "$HOME/.dhyve/vm.cmdline")"
    echo "        versions:"
    echo "            client: $(get_installed_version)"

    local vm_version="unknown"
    if [ -e "$HOME/.dhyve/vm.version" ]; then
        vm_version=$(cat "$HOME/.dhyve/vm.version")
    fi
    echo "            vm:     $vm_version"
}

vm_ssh () {
    check_vm_exists
    check_vm_running
    echo "[dhyve] starting ssh session.."
    ssh -i "$HOME/.dhyve/dhyve_key" -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no docker@dhyve.vm "$@"
}

vm_scp () {
    check_vm_exists
    check_vm_running
    scp -i "$HOME/.dhyve/dhyve_key" -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "$@"
}

vm_env () {
    local name=$(cat "$HOME/.dhyve/vm.name")
    local ip=$(get_ip $name)
    if [ -z "$ip" ]; then
        echo "[dhyve] has not been started yet, please run 'dhyve up'" >&2
        return 1
    fi

    echo "export DOCKER_HOST=$ip:2376"
    echo "export DOCKER_CERT_PATH=$HOME/.dhyve/certs"
    echo "export DOCKER_TLS_VERIFY=yes"
}

cmd=$1
shift
case "$cmd" in
    init)
        vm_init "$@"
        ;;
    up|start)
        vm_up
        ;;
    down|stop)
        vm_down
        ;;
    status)
        vm_status
        ;;
    ssh)
        vm_ssh "$@"
        ;;
    scp)
        vm_scp "$@"
        ;;
    env)
        vm_env
        ;;
    update)
        update_dhyve
        ;;
    upgrade)
        upgrade_boot2docker
        ;;
    *)
        print_help
        ;;
esac
